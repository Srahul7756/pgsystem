# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'pgsystem' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

 post_install do |installer|
  react_native_post_install(
    installer,
    config[:reactNativePath],
    :mac_catalyst_enabled => false
  )

  # Comprehensive fix for all CocoaPods script phases
  main_project = installer.aggregate_targets[0].user_project
  pods_project = installer.pods_project
  targets = main_project.targets + pods_project.targets
  
  targets.each do |target|
    target.shell_script_build_phases.each do |phase|
      # Handle specific React Native script phases
      if phase.name&.include?("[RN]Check rncore")
        phase.input_paths = ['${PODS_ROOT}/../package.json']
        phase.output_paths = ['${DERIVED_FILE_DIR}/rncore_check']
        phase.always_out_of_date = '0'
      elsif phase.name&.include?("[CP-User] [RN]Check FBReactNativeSpec")
        phase.input_paths = ['${PODS_ROOT}/../package.json']
        phase.output_paths = ['${DERIVED_FILE_DIR}/fbreactnativespec_check']
        phase.always_out_of_date = '0'
      # Handle all other CocoaPods script phases that lack dependencies
      elsif phase.name&.start_with?("[CP") && 
            (phase.input_paths || []).empty? && 
            (phase.output_paths || []).empty?
        phase.always_out_of_date = '1'
      end
    end
  end
  
  main_project.save
  pods_project.save
end

end
